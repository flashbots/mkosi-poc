#!/bin/bash
set -euo pipefail

# Configuration
KERNEL_VERSION="6.13.12"
KERNEL_REPO="https://github.com/gregkh/linux"
BASE_CONFIG="$SRCDIR/kernel/kernel-yocto.config"
SNIPPETS_DIR="$SRCDIR/kernel/snippets"

echo "Building kernel $KERNEL_VERSION with snippets: ${KERNEL_CONFIG_SNIPPETS:-none}"

# Generate final config
config_file=$(mktemp)
cp "$BASE_CONFIG" "$config_file"
if [[ -n "${KERNEL_CONFIG_SNIPPETS:-}" ]]; then
    IFS=',' read -ra snippets <<< "$KERNEL_CONFIG_SNIPPETS"
    for snippet in "${snippets[@]}"; do
        snippet_file="$SNIPPETS_DIR/${snippet}.config"
        [[ -f "$snippet_file" ]] && cat "$snippet_file" >> "$config_file"
    done
fi

# Calculate cache key and paths
config_hash=$(sha256sum "$config_file" | cut -d' ' -f1 | cut -c1-12)
cache_dir="$BUILDDIR/kernel-${KERNEL_VERSION}-${config_hash}"
kernel_file="$cache_dir/bzImage"

# Use cached kernel if available
if [[ -f "$kernel_file" ]]; then
    echo "Using cached kernel: $kernel_file"
else
    echo "Building kernel from source..."
    build_dir="$BUILDROOT/build/kernel-${KERNEL_VERSION}"
    
    # Clone if needed
    [[ ! -d "$build_dir" ]] && git clone --depth 1 --branch "v${KERNEL_VERSION}" "$KERNEL_REPO" "$build_dir"
    
    # Build kernel
    cd "$build_dir"
    cp "$config_file" .config
    export KBUILD_BUILD_TIMESTAMP="$(date -u -d @${SOURCE_DATE_EPOCH:-$(date +%s)})"
    export KBUILD_BUILD_USER="mkosi" KBUILD_BUILD_HOST="mkosi-builder"
    
    mkosi-chroot make olddefconfig
    mkosi-chroot make -j "$(nproc 2>/dev/null || echo 2)" bzImage ARCH=x86_64 CONFIG_EFI_STUB=y
    
    # Cache result
    mkdir -p "$cache_dir"
    cp arch/x86_64/boot/bzImage "$cache_dir/"
    cp .config "$cache_dir/config"
fi

# Install kernel
mkdir -p "$DESTDIR/usr/lib/modules/$KERNEL_VERSION"
cp "$kernel_file" "$DESTDIR/usr/lib/modules/$KERNEL_VERSION/vmlinuz"
rm -f "$config_file"

echo "Kernel installed successfully"